{"createdAt":"2025-09-30T11:53:45.632Z","updatedAt":"2025-10-03T15:16:40.000Z","id":"t8lo2pvBVcmlEUhC","name":"Arthika: Expense Assistant V1","active":true,"isArchived":false,"nodes":[{"parameters":{"promptType":"define","text":"={{ $('Telegram Trigger').item.json.message.text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card). (Always Check existing Payment Methods in the database using tool \"Get Payment Methods Already Available\" and if already exist similar Payment method in databse then use that else add new one generic to reuse it for other also)  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- Always Check existing Payment Methods in the database using tool \"Get Payment Methods Already Available\" and if already exist similar Payment method in databse then use that else add new one generic to reuse it for other also\n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n\nImporttant: Reply in Markdown(Legacy) format\nAlways confirm data before inserting into the databse. Once you got all confirmation then only add it into the database."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[288,624],"id":"68e13aa7-f1b5-4d6f-b9ee-9df86528bfe6","name":"AI Agent"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[144,848],"id":"fbc54f89-72e0-4990-9aaf-c215ac1d7a9b","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[288,848],"id":"56f0c7ae-ed26-492c-88d7-8af9e0cbf303","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[1872,-272],"id":"831c206f-2071-48ef-a941-c3f5f06d7b0c","name":"When clicking ‘Execute workflow’","disabled":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[784,864],"id":"5b7bee68-0792-4a69-a6f2-3dfa843313ab","name":"Date & Time"},{"parameters":{"updates":["message"],"additionalFields":{"download":true,"imageSize":"large"}},"type":"n8n-nodes-base.telegramTrigger","typeVersion":1.2,"position":[-1008,0],"id":"06768710-d998-46f5-863a-2718218efca0","name":"Telegram Trigger","webhookId":"977e1d4a-848e-4b4d-a9af-4ff919143681","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[608,624],"id":"5e14054c-1e01-4b04-81a3-e463e09e47ec","name":"Manual Reply","webhookId":"aa8bb740-4952-49f3-a486-1abc156f7be2","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2dd6d285-58b0-4a94-ad68-a1241b76d6bf","leftValue":"={{ $json.message.photo }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-832,0],"id":"87c74724-217b-4f30-8b79-6167adf9832c","name":"is file there"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=Manual","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[640,864],"id":"33e17be7-c061-4e05-8c40-dc7ffc4b81fa","name":"Insert New Expense","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"inputText":"={{ $json.content.parts[0].text }}","categories":{"categories":[{"category":"is expense or transaction","description":"is given image is expense or transaction"},{"category":"is not  expense or not transaction","description":"is given image is not  expense or not transaction"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.textClassifier","typeVersion":1.1,"position":[-80,-256],"id":"1e12e09c-e42a-4126-9df8-25ec74e79774","name":"Text Classifier"},{"parameters":{"model":"llama-3.1-8b-instant","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[-80,-80],"id":"d932713c-4c4d-4414-b092-3a0c0eef8944","name":"Groq Chat Model","credentials":{"groqApi":{"id":"qfg4IRTFYATnvhGV","name":"Groq account"}}},{"parameters":{"resource":"document","modelId":{"__rl":true,"value":"models/gemini-2.5-flash","mode":"list","cachedResultName":"models/gemini-2.5-flash"},"text":"is document related to any transaction or expense?(if Yes return \"yes its expense\"/No return \"No, Given image is not any expense or transaction\")\n\nif its yes then extract below details:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  ","inputType":"binary","options":{}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[-272,-256],"id":"5eaf52f5-3249-486c-9842-4d062ccb8b8e","name":"Analyze document","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Please provide valid expense or transaction related document.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[288,-144],"id":"d4c0e49e-a974-4cfa-ae28-46e1d620b297","name":"False Image","webhookId":"f46f796a-ecab-462c-9781-8ee9dbd48a93","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[432,-352],"id":"b41a6564-d496-4e85-8966-cc91e5589b27","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[576,-352],"id":"84ec9063-9d0c-4053-966a-b00ec4dc4461","name":"Postgres Chat Memory1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[928,-368],"id":"10d07f68-7110-49e3-b73e-f98af4451a15","name":"Date & Time1"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=OCR","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[784,-368],"id":"48e376f0-de12-4ce5-b201-17f4bc835810","name":"Insert New Expense1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"promptType":"define","text":"={{ $json.content.parts[0].text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card). (Always Check existing Payment Methods in the database using tool \"Get Payment Methods Already Available\" and if already exist similar Payment method in databse then use that else add new one generic to reuse it for other also)  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- Always Check existing Payment Methods in the database using tool \"Get Payment Methods Already Available\" and if already exist similar Payment method in databse then use that else add new one generic to reuse it for other also\n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n\nImporttant: Reply in Markdown(Legacy) format\nAlways confirm data before inserting into the databse. Once you got all confirmation then only add it into the database."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[560,-576],"id":"69ef1a9c-1134-44c7-9609-b8a5c4e79c97","name":"OCR Agent data filler"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[912,-576],"id":"74041fb5-1514-496a-8a8e-32a6979408c0","name":"Ocr Reply","webhookId":"0e1982b6-780a-4d96-b65d-48c2138dcc17","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}},"onError":"continueErrorOutput"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Something Went wrong. Expense is created. Failed to Respond.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1120,-496],"id":"c5d39230-9a8a-4e6e-b0df-06d9f987e488","name":"False Image1","webhookId":"53037417-f5d8-4880-bbcc-bc5aae3ce52e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"model":"llama-3.3-70b-versatile","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[-304,640],"id":"e57aeca1-d2d5-4b5a-b387-2c483873bf33","name":"Groq Chat Model1","credentials":{"groqApi":{"id":"qfg4IRTFYATnvhGV","name":"Groq account"}}},{"parameters":{"jsCode":"const expense_user = $('Telegram Trigger').first().json.message.from.first_name\nlet query = `\nSELECT \n    TO_CHAR(transaction_date, 'YYYY-MM') AS month,\n    SUM(amount) AS total_spent, \n    COUNT(*) AS transactions_count, \n    MIN(amount) AS lowest_expense,\n    MAX(amount) AS highest_expense,\n    ROUND(AVG(amount), 2) AS avg_expense \nFROM personal_expenses\nWHERE expense_user LIKE '%${expense_user}%'\nGROUP BY TO_CHAR(transaction_date, 'YYYY-MM')\nORDER BY month;\n`\nreturn {\n  query:query\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[304,208],"id":"f60254f5-482a-4cac-8c02-0655f6edbe9b","name":"Query Design for Comparison By Month Report"},{"parameters":{"operation":"executeQuery","query":"{{ $json.query }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[512,208],"id":"8f1c602c-3817-40f9-ba6c-b823da984284","name":"Data Fetching for Comparison By Month Report","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"labelsMode":"array","labelsArray":"={{ $json.Month }}","data":"={{ $json['Total Spent'] }}","chartOptions":{"backgroundColor":"#a9dadc00","devicePixelRatio":2,"format":"png","height":300,"width":500},"datasetOptions":{"backgroundColor":"#24c89cff","borderColor":"#08516300","label":"=Comparison By Month Report (Total Spend)"}},"type":"n8n-nodes-base.quickChart","typeVersion":1,"position":[2528,-256],"id":"a4cf13f3-3c7d-4eb6-a3fb-14c63ead3d7c","name":"QuickChart"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"month","renameField":true,"outputFieldName":"Month"},{"fieldToAggregate":"total_spent","renameField":true,"outputFieldName":"Total Spent"},{"fieldToAggregate":"avg_expense","renameField":true,"outputFieldName":"Average Spent Ammount"},{"fieldToAggregate":"highest_expense","renameField":true,"outputFieldName":"Highest Expense"},{"fieldToAggregate":"lowest_expense","renameField":true,"outputFieldName":"Lowest Expense"},{"fieldToAggregate":"transactions_count","renameField":true,"outputFieldName":"Transaction Counts"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[720,208],"id":"0dea8af6-29ef-4855-9f0f-195fe2fd34f2","name":"Aggregate"},{"parameters":{"jsCode":"return {\n  url: `https://quickchart.io/chart?c={\n    type:'bar',\n    data:{\n      labels:['Jan 2025','Feb 2025','March 2025','April 2025'],\n      datasets:[\n        {label:'2024',data:[3,7,2,5]},\n        {label:'2025',data:[4,6,5,3]}\n      ]\n    }\n  }`\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2096,-272],"id":"7e27e75a-8d00-46a7-bf0b-b4cf7c3f7159","name":"Code"},{"parameters":{"url":"={{ $json.url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2304,-272],"id":"21f8ab46-f414-4c5b-affd-fafea8b43dee","name":"HTTP Request"},{"parameters":{"jsCode":"return {\n  url: `https://quickchart.io/chart?w=800&h=400&bkg=%23fff&v=2.9.4&c={\n    type:'bar',\n    data:{\n      labels:[${$input.first().json.Month.map(m => `'${m}'`).join(\",\")}],\n      datasets:[\n        {label:'Total Amount Spent',data:[${$input.first().json['Total Spent'].map(m => m).join(\",\")}]},\n        {label:'Average Spend Amount',data:[${$input.first().json['Average Spent Ammount'].map(m => m).join(\",\")}]},\n        {label:'Highest Spend Amount',data:[${$input.first().json['Highest Expense'].map(m => m).join(\",\")}]},\n        {label:'Lowest Spend Amount',data:[${$input.first().json['Lowest Expense'].map(m => m).join(\",\")}]}\n      ]\n    },\n    options: {\n      title: {\n        display: true,\n        text: 'Monthly Expense Comparison'\n      },\n      plugins: {        \n        datalabels: {\n          display: true,\n          color: 'black',\n          anchor: 'end',\n          align: 'top',\n          font: { weight: 'bold' }\n        }\n      }\n    },\n    plugins:['chartjs-plugin-datalabels']\n  }`\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[928,208],"id":"cdfd6d31-ba91-4b09-8933-a972445a477c","name":"Code1"},{"parameters":{"url":"={{ $json.url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1136,208],"id":"e13f421b-36dc-4245-982a-9399d8c1bba3","name":"Join Bar Chart"},{"parameters":{"inputText":"={{ $json.message.text }}","categories":{"categories":[{"category":"Monthly Expense Report ","description":"=This branch handles requests for a month-to-month expense summary. It generates a report showing total expenses, average spending, highest and lowest payments, and transaction counts per month. Useful for tracking spending patterns, comparing month-to-month trends, and identifying high or low expense periods.\n\nTrigger phrases / intent examples:\n* “Show me my monthly expense report”\n* “Monthly expense summary”\n* “Month-to-month expense comparison”\n* “Report of total, average, highest, and lowest expenses per month”"},{"category":"Expense Statement Report for Current Month","description":"This branch handles requests where the user asks for their current month’s expense statement.\nIt generates a tabular report of all transactions from the 1st day of the current month until today’s date.\nThe report includes key details such as:\n* Transaction Date\n* Amount\n* Category\n* Payment Method\n* Merchant\n* Notes\nUseful for tracking and analyzing detailed transaction activity during the current month.\n\nTrigger Phrases / Intent Examples:\n“Show me my expenses for this month”\n“Give me the statement of expenses for October”\n“What are my expenses from the 1st of this month till today?”\n“Download this month’s expense report”"},{"category":"Other","description":"if text intention is other than report"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.textClassifier","typeVersion":1.1,"position":[-224,384],"id":"0bca1698-03f1-473e-9e7d-a21058cae5c2","name":"Intension Finder"},{"parameters":{"operation":"sendDocument","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","binaryData":true,"additionalFields":{"caption":"Here is a report of Month to Month Comparison of Total Expense, Average Expense, Highest and Lowest Amount Paid within Month.","fileName":"Total Spend Amount-Comparison By Month Report.png"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1344,208],"id":"960bc049-d51f-4cae-9ce0-5cd579a96955","name":"Send Bar Chart Report Of Monthly Expense Report","webhookId":"5398425d-0b83-4b89-ada3-f78dc5a9d92e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"operation":"executeQuery","query":"SELECT\n    TO_CHAR(DATE_TRUNC('month', transaction_date), 'YYYY-MM') AS month,\n    payment_method,\n    COUNT(*) AS transaction_count\nFROM personal_expenses\nGROUP BY month, payment_method\nORDER BY month, payment_method;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2128,-576],"id":"c81d66c0-e086-4bbd-901b-923aa9e53388","name":"Count of Payment Type and Transactions","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"operation":"sendDocument","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","binaryData":true,"additionalFields":{"caption":"Here is a report of Month to Month Comparison of Transaction counts.","fileName":"Total Spend Amount-Comparison By Month Report.png"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[2608,208],"id":"dab183dc-4a3f-4487-ab79-454859211817","name":"Send a Count of Transaction By Months report1","webhookId":"5398425d-0b83-4b89-ada3-f78dc5a9d92e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"month","renameField":true,"outputFieldName":"Months"},{"fieldToAggregate":"transaction_count","renameField":true,"outputFieldName":"Transaction Count"},{"fieldToAggregate":"payment_method","renameField":true,"outputFieldName":"Payment Method"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1968,208],"id":"896d9a06-2e20-4165-b420-34f0f67e8d52","name":"Monthly Financial Activity Report Query Execution Aggregate1"},{"parameters":{"jsCode":"const expense_user = $('Telegram Trigger').first().json.message.from.first_name\nlet query = `\nSELECT\n    TO_CHAR(DATE_TRUNC('month', transaction_date), 'YYYY-MM') AS month,\n    payment_method,\n    COUNT(*) AS transaction_count\nFROM personal_expenses\nWHERE expense_user LIKE '%${expense_user}%'\nGROUP BY month, payment_method\nORDER BY month, payment_method;\n`\nreturn {\n  query:query\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1568,208],"id":"b667e5d3-e6ff-4418-99fa-7674c71e1fe4","name":"Monthly Financial Activity Report Transaction Count By Payment Method"},{"parameters":{"operation":"executeQuery","query":"{{ $json.query }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1776,208],"id":"d72caa5b-1db4-4d8e-816b-382950fe7f0d","name":"Monthly Financial Activity Report Transaction Count By Payment Method Execution","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"jsCode":"// Prepare unique months\nconst months = [...new Set($input.first().json.Months)];\n\n// Prepare unique payment methods\nconst paymentMethods = [...new Set($input.first().json['Payment Method'])];\n\n// Build datasets\nconst datasets = paymentMethods.map(method => {\n    // For each month, find the transaction count for this payment method\n    const data = months.map(month => {\n        const idx = $input.first().json.Months.findIndex((m, i) => m === month && $input.first().json['Payment Method'][i] === method);\n        return idx !== -1 ? Number($input.first().json['Transaction Count'][idx]) : 0;\n    });\n    return `{label:'${method}',data:[${data.join(\",\")}]}`;\n});\n\n// Find maximum value to calculate suggestedMax\nconst allCounts = $input.first().json['Transaction Count'].map(Number);\nconst maxCount = Math.max(...allCounts);\nconst suggestedMax = maxCount + Math.ceil(maxCount * 0.4); // add 10% buffer\n\nreturn {\n    url: `https://quickchart.io/chart?w=800&h=400&bkg=%23fff&v=2.9.4&c={\n        type:'bar',\n        data:{\n            labels:[${months.map(m => `'${m}'`).join(\",\")}],\n            datasets:[${datasets.join(\",\")}]\n        },\n        options:{\n            title:{\n                display:true,\n                text:'Monthly Transaction Counts by Payment Method'\n            },\n            scales:{\n                y:{\n                    beginAtZero:true,\n                    suggestedMax:${suggestedMax}\n                }\n            },\n            plugins:{\n                datalabels:{\n                    display:true,\n                    color:'black',\n                    anchor:'end',\n                    align:'top',\n                    font:{weight:'bold'}\n                }\n            }\n        },\n        plugins:['chartjs-plugin-datalabels']\n    }`\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2176,208],"id":"f4431c55-6a41-450a-8acb-09af75bd10bb","name":"Monthly Financial Activity Report Transaction Count By Payment Method Chart generation"},{"parameters":{"url":"={{ $json.url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2384,208],"id":"7f1bcbd9-f2f2-4965-a4bb-ed654b981fcc","name":"Monthly Financial Activity Report Transaction Count By Payment Method Generate"},{"parameters":{"operation":"sendDocument","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","binaryData":true,"additionalFields":{"caption":"Here is Expense Statement for this  month.","fileName":"Total Spend Amount-Comparison By Month Report.png"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1408,400],"id":"fbd2fac6-cbff-45fc-b025-ccf77a3adc3c","name":"Send a Count of Transaction By Months report","webhookId":"5398425d-0b83-4b89-ada3-f78dc5a9d92e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"jsCode":"const expense_user = $('Telegram Trigger').first().json.message.from.first_name\nlet query = `\nSELECT \n    id,\n    TO_CHAR(transaction_date, 'YYYY-MM-DD') AS transaction_date,\n    amount,\n    payment_method,\n    category,\n    merchant,\n    COALESCE(notes, '') AS notes\nFROM personal_expenses\nWHERE transaction_date::date BETWEEN DATE_TRUNC('month', CURRENT_DATE) \n  AND CURRENT_DATE\n  AND expense_user LIKE '%${expense_user}%'\nORDER BY transaction_date ASC;\n`\nreturn {\n  query:query\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[304,400],"id":"ff34729b-706d-47d7-8eae-c83c743d240c","name":"Expense Statement Report Query Design"},{"parameters":{"operation":"executeQuery","query":"{{ $json.query }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[512,400],"id":"f54dcf14-be67-43dd-8988-981bc6578e72","name":"Expense Statement Report Execution","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"jsCode":"const now = new Date();\nconst monthNames = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\nconst currentMonth = monthNames[now.getMonth()];\nconst currentYear = now.getFullYear();\nconst title = `Expense Statement for ${currentMonth} - ${currentYear}`;\n\nlet rawList = $input.first().json.list;\nlet dataSource = rawList.map(e => ({\n  transaction_date: e.transaction_date,\n  amount: `₹ ${parseFloat(e.amount)}`,\n  category: e.category,\n  paymentMethod: e.payment_method,\n  merchant: e.merchant\n}));\n\n// Add Grand Total row\nconst totalAmount = rawList.reduce((sum, e) => sum + parseFloat(e.amount), 0);\ndataSource.push({\n  transaction_date: \"Grand Total\",\n  amount: `₹ ${totalAmount.toFixed(2)}`,\n  category: \"\",\n  paymentMethod: \"\",\n  merchant: \"\"\n});\nreturn { \n  data: {\n    \"data\": {\n      \"title\": title,\n      \"columns\": [\n        { width: 200, title: \"Transaction Date\", dataIndex: \"transaction_date\" },\n        { width: 200, title: \"Category\", dataIndex: \"category\" },\n        { width: 200, title: \"Payment Method\", dataIndex: \"paymentMethod\" },\n        { width: 200, title: \"Merchant\", dataIndex: \"merchant\" },\n        { width: 100, title: \"Amount\", dataIndex: \"amount\" }\n      ],\n      \"dataSource\": dataSource\n    }\n  }\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[944,400],"id":"d88c6b4e-4836-41a5-9995-26d1586e6867","name":"Expense Statement Report Tabular Chart generation"},{"parameters":{"method":"POST","url":"=https://api.quickchart.io/v1/table","sendHeaders":true,"headerParameters":{"parameters":[{"name":"content-type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1168,400],"id":"6294f8d1-3423-4c89-bd64-7a1ca7eddbe4","name":"Expense Statement Report Generate"},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"list","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[720,400],"id":"0632bb80-a17c-4647-a323-2063d02603f7","name":"Aggregate1"},{"parameters":{"descriptionType":"manual","toolDescription":"Get Payment Methods Already Available in the database","operation":"executeQuery","query":"select Distinct payment_method\nFROM public.personal_expenses;","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[1040,1328],"id":"bc0fb552-14c9-489b-87c9-2bb26b00417e","name":"Get Payment Methods Already Available","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}}],"connections":{"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Code","type":"main","index":0}]]},"Date & Time":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"AI Agent":{"main":[[{"node":"Manual Reply","type":"main","index":0}]]},"Telegram Trigger":{"main":[[{"node":"is file there","type":"main","index":0}]]},"is file there":{"main":[[{"node":"Analyze document","type":"main","index":0}],[{"node":"Intension Finder","type":"main","index":0}]]},"Insert New Expense":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Text Classifier","type":"ai_languageModel","index":0}]]},"Analyze document":{"main":[[{"node":"Text Classifier","type":"main","index":0}]]},"Text Classifier":{"main":[[{"node":"OCR Agent data filler","type":"main","index":0}],[{"node":"False Image","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"OCR Agent data filler","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory1":{"ai_memory":[[{"node":"OCR Agent data filler","type":"ai_memory","index":0}]]},"Date & Time1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"Insert New Expense1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"OCR Agent data filler":{"main":[[{"node":"Ocr Reply","type":"main","index":0}]]},"Ocr Reply":{"main":[[],[{"node":"False Image1","type":"main","index":0}]]},"Groq Chat Model1":{"ai_languageModel":[[{"node":"Intension Finder","type":"ai_languageModel","index":0}]]},"Query Design for Comparison By Month Report":{"main":[[{"node":"Data Fetching for Comparison By Month Report","type":"main","index":0}]]},"Data Fetching for Comparison By Month Report":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Code1","type":"main","index":0}]]},"QuickChart":{"main":[[]]},"Code":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Join Bar Chart","type":"main","index":0}]]},"Join Bar Chart":{"main":[[{"node":"Send Bar Chart Report Of Monthly Expense Report","type":"main","index":0}]]},"Intension Finder":{"main":[[{"node":"Query Design for Comparison By Month Report","type":"main","index":0}],[{"node":"Expense Statement Report Query Design","type":"main","index":0}],[{"node":"AI Agent","type":"main","index":0}]]},"Send Bar Chart Report Of Monthly Expense Report":{"main":[[{"node":"Monthly Financial Activity Report Transaction Count By Payment Method","type":"main","index":0}]]},"Monthly Financial Activity Report Query Execution Aggregate1":{"main":[[{"node":"Monthly Financial Activity Report Transaction Count By Payment Method Chart generation","type":"main","index":0}]]},"Monthly Financial Activity Report Transaction Count By Payment Method":{"main":[[{"node":"Monthly Financial Activity Report Transaction Count By Payment Method Execution","type":"main","index":0}]]},"Monthly Financial Activity Report Transaction Count By Payment Method Execution":{"main":[[{"node":"Monthly Financial Activity Report Query Execution Aggregate1","type":"main","index":0}]]},"Monthly Financial Activity Report Transaction Count By Payment Method Chart generation":{"main":[[{"node":"Monthly Financial Activity Report Transaction Count By Payment Method Generate","type":"main","index":0}]]},"Monthly Financial Activity Report Transaction Count By Payment Method Generate":{"main":[[{"node":"Send a Count of Transaction By Months report1","type":"main","index":0}]]},"Expense Statement Report Query Design":{"main":[[{"node":"Expense Statement Report Execution","type":"main","index":0}]]},"Expense Statement Report Execution":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"Expense Statement Report Tabular Chart generation":{"main":[[{"node":"Expense Statement Report Generate","type":"main","index":0}]]},"Expense Statement Report Generate":{"main":[[{"node":"Send a Count of Transaction By Months report","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Expense Statement Report Tabular Chart generation","type":"main","index":0}]]},"Get Payment Methods Already Available":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0},{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Telegram Trigger":[{"json":{"update_id":983040262,"message":{"message_id":396,"from":{"id":1443136452,"is_bot":false,"first_name":"Prasad","last_name":"Sawant","language_code":"en"},"chat":{"id":1443136452,"first_name":"Prasad","last_name":"Sawant","type":"private"},"date":1759504552,"text":"transfered 250 rs to diksha keluskar by GPay as i had took 250 rs from her for passport photos. this transaction done right now."}}}]},"versionId":"420749de-68b8-4e62-aa2c-1334b9d289d9","triggerCount":1,"shared":[{"createdAt":"2025-09-30T11:53:45.638Z","updatedAt":"2025-09-30T11:53:45.638Z","role":"workflow:owner","workflowId":"t8lo2pvBVcmlEUhC","projectId":"jYp8xiWttkK2cWvC"}],"tags":[]}