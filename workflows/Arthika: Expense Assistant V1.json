{"createdAt":"2025-09-30T11:53:45.632Z","updatedAt":"2025-09-30T14:59:52.000Z","id":"t8lo2pvBVcmlEUhC","name":"Arthika: Expense Assistant V1","active":true,"isArchived":false,"nodes":[{"parameters":{"promptType":"define","text":"={{ $('Telegram Trigger').item.json.message.text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[544,736],"id":"68e13aa7-f1b5-4d6f-b9ee-9df86528bfe6","name":"AI Agent"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[400,960],"id":"fbc54f89-72e0-4990-9aaf-c215ac1d7a9b","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[544,960],"id":"56f0c7ae-ed26-492c-88d7-8af9e0cbf303","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[1920,-576],"id":"831c206f-2071-48ef-a941-c3f5f06d7b0c","name":"When clicking ‘Execute workflow’"},{"parameters":{"operation":"executeQuery","query":"CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";  -- required for gen_random_uuid()\n\nCREATE TABLE personal_expenses (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),  -- Unique identifier (UUID v4)\n    transaction_date TIMESTAMP NOT NULL,            -- When the transaction happened\n    amount NUMERIC(12, 2) NOT NULL,                 -- Amount spent\n    payment_method VARCHAR(50) NOT NULL,            -- e.g. GPay, PhonePe, Cash, Card, UPI\n    category VARCHAR(100),                          -- e.g. Food, Travel, Shopping\n    merchant VARCHAR(150),                          -- Store/vendor name\n    notes TEXT,                                     -- Any extra details\n    source VARCHAR(50) DEFAULT 'manual',            -- 'image_ocr' or 'manual'\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- When the record was inserted\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2128,-576],"id":"c81d66c0-e086-4bbd-901b-923aa9e53388","name":"Execute a SQL query","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[848,960],"id":"5b7bee68-0792-4a69-a6f2-3dfa843313ab","name":"Date & Time"},{"parameters":{"updates":["message"],"additionalFields":{"download":true,"imageSize":"large"}},"type":"n8n-nodes-base.telegramTrigger","typeVersion":1.2,"position":[-1008,0],"id":"06768710-d998-46f5-863a-2718218efca0","name":"Telegram Trigger","webhookId":"977e1d4a-848e-4b4d-a9af-4ff919143681","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[896,736],"id":"5e14054c-1e01-4b04-81a3-e463e09e47ec","name":"Manual Reply","webhookId":"aa8bb740-4952-49f3-a486-1abc156f7be2","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2dd6d285-58b0-4a94-ad68-a1241b76d6bf","leftValue":"={{ $json.message.photo }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-832,0],"id":"87c74724-217b-4f30-8b79-6167adf9832c","name":"is file there"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=Manual","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[704,960],"id":"33e17be7-c061-4e05-8c40-dc7ffc4b81fa","name":"Insert New Expense","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"inputText":"={{ $json.content.parts[0].text }}","categories":{"categories":[{"category":"is expense or transaction","description":"is given image is expense or transaction"},{"category":"is not  expense or not transaction","description":"is given image is not  expense or not transaction"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.textClassifier","typeVersion":1.1,"position":[-80,-256],"id":"1e12e09c-e42a-4126-9df8-25ec74e79774","name":"Text Classifier"},{"parameters":{"model":"llama-3.1-8b-instant","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[-80,-80],"id":"d932713c-4c4d-4414-b092-3a0c0eef8944","name":"Groq Chat Model","credentials":{"groqApi":{"id":"qfg4IRTFYATnvhGV","name":"Groq account"}}},{"parameters":{"resource":"document","modelId":{"__rl":true,"value":"models/gemini-2.5-flash","mode":"list","cachedResultName":"models/gemini-2.5-flash"},"text":"is document related to any transaction or expense?(if Yes return \"yes its expense\"/No return \"No, Given image is not any expense or transaction\")\n\nif its yes then extract below details:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  ","inputType":"binary","options":{}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[-272,-256],"id":"5eaf52f5-3249-486c-9842-4d062ccb8b8e","name":"Analyze document","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Please provide valid expense or transaction related document.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[288,-144],"id":"d4c0e49e-a974-4cfa-ae28-46e1d620b297","name":"False Image","webhookId":"f46f796a-ecab-462c-9781-8ee9dbd48a93","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[432,-352],"id":"b41a6564-d496-4e85-8966-cc91e5589b27","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[576,-352],"id":"84ec9063-9d0c-4053-966a-b00ec4dc4461","name":"Postgres Chat Memory1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[864,-352],"id":"10d07f68-7110-49e3-b73e-f98af4451a15","name":"Date & Time1"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=OCR","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[720,-352],"id":"48e376f0-de12-4ce5-b201-17f4bc835810","name":"Insert New Expense1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"promptType":"define","text":"={{ $json.content.parts[0].text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n\nImporttant: Reply in Markdown(Legacy) format"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[560,-576],"id":"69ef1a9c-1134-44c7-9609-b8a5c4e79c97","name":"OCR Agent data filler"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[912,-576],"id":"74041fb5-1514-496a-8a8e-32a6979408c0","name":"Ocr Reply","webhookId":"0e1982b6-780a-4d96-b65d-48c2138dcc17","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}},"onError":"continueErrorOutput"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Something Went wrong. Expense is created. Failed to Respond.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1120,-496],"id":"c5d39230-9a8a-4e6e-b0df-06d9f987e488","name":"False Image1","webhookId":"53037417-f5d8-4880-bbcc-bc5aae3ce52e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"inputText":"={{ $json.message.text }}","categories":{"categories":[{"category":"ComparisonByMonthReport","description":"=if user ask for \"Generates a month-over-month expense comparison report. It analyzes spending across different months, highlights total expenses per month, and points out increases or decreases compared to previous months. Useful for identifying spending trends and seasonal patterns.\" OR particularly for report \"Comparison By Month Report\""},{"category":"Other","description":"if text intention is other than report"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.textClassifier","typeVersion":1.1,"position":[-240,400],"id":"0bca1698-03f1-473e-9e7d-a21058cae5c2","name":"Text Classifier1"},{"parameters":{"model":"llama-3.3-70b-versatile","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[-304,640],"id":"e57aeca1-d2d5-4b5a-b387-2c483873bf33","name":"Groq Chat Model1","credentials":{"groqApi":{"id":"qfg4IRTFYATnvhGV","name":"Groq account"}}},{"parameters":{"jsCode":"const expense_user = $('Telegram Trigger').first().json.message.from.first_name\nlet query = `\nSELECT \n    TO_CHAR(transaction_date, 'YYYY-MM') AS month,\n    SUM(amount) AS total_spent, \n    COUNT(*) AS transactions_count, \n    MIN(amount) AS lowest_expense,\n    MAX(amount) AS highest_expense,\n    ROUND(AVG(amount), 2) AS avg_expense \nFROM personal_expenses\nWHERE expense_user LIKE '%${expense_user}%'\nGROUP BY TO_CHAR(transaction_date, 'YYYY-MM')\nORDER BY month;\n`\nreturn {\n  query:query\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[624,80],"id":"f60254f5-482a-4cac-8c02-0655f6edbe9b","name":"Query Design for Comparison By Month Report"},{"parameters":{"operation":"executeQuery","query":"{{ $json.query }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[832,80],"id":"8f1c602c-3817-40f9-ba6c-b823da984284","name":"Data Fetching for Comparison By Month Report","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"labelsMode":"array","labelsArray":"={{ $json.Month }}","data":"={{ $json['Total Spent'] }}","chartOptions":{"backgroundColor":"#a9dadc00","devicePixelRatio":2,"format":"png","height":300,"width":500},"datasetOptions":{"backgroundColor":"#24c89cff","borderColor":"#08516300","label":"=Comparison By Month Report (Total Spend)"}},"type":"n8n-nodes-base.quickChart","typeVersion":1,"position":[1232,80],"id":"a4cf13f3-3c7d-4eb6-a3fb-14c63ead3d7c","name":"QuickChart"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"month","renameField":true,"outputFieldName":"Month"},{"fieldToAggregate":"total_spent","renameField":true,"outputFieldName":"Total Spent"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1040,80],"id":"0dea8af6-29ef-4855-9f0f-195fe2fd34f2","name":"Aggregate"},{"parameters":{"operation":"sendDocument","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","binaryData":true,"additionalFields":{"caption":"Here is Total Spend Amount-Comparison By Month Report.","fileName":"Total Spend Amount-Comparison By Month Report.png"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1440,80],"id":"960bc049-d51f-4cae-9ce0-5cd579a96955","name":"Send a document","webhookId":"5398425d-0b83-4b89-ada3-f78dc5a9d92e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"jsCode":"const expense_user = $('Telegram Trigger').first().json.message.from.first_name\nlet query = `\nSELECT \n    TO_CHAR(transaction_date, 'YYYY-MM') AS month,\n    SUM(amount) AS total_spent, \n    COUNT(*) AS transactions_count, \n    MIN(amount) AS lowest_expense,\n    MAX(amount) AS highest_expense,\n    ROUND(AVG(amount), 2) AS avg_expense \nFROM personal_expenses\nWHERE expense_user LIKE '%${expense_user}%'\nGROUP BY TO_CHAR(transaction_date, 'YYYY-MM')\nORDER BY month;\n`\nreturn {\n  query:query\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[624,256],"id":"9f888f57-c770-450b-ac7f-f568cec8b3f2","name":"Query Design for Comparison By Month Report1"},{"parameters":{"operation":"executeQuery","query":"{{ $json.query }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[832,256],"id":"e3782e90-58d9-48ee-becc-393349a71e52","name":"Data Fetching for Comparison By Month Report1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"labelsMode":"array","labelsArray":"={{ $json.Month }}","data":"={{ $json['Average Expense'] }}","chartOptions":{"backgroundColor":"#a9dadc00","devicePixelRatio":2,"format":"png","height":300,"width":500},"datasetOptions":{"backgroundColor":"#c88424ff","borderColor":"#320863ff","label":"=Comparison By Month Report (Average Spend)"}},"type":"n8n-nodes-base.quickChart","typeVersion":1,"position":[1232,256],"id":"274c3cb1-6434-43a1-8f20-fd3b1b4603cc","name":"QuickChart1"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"month","renameField":true,"outputFieldName":"Month"},{"fieldToAggregate":"avg_expense","renameField":true,"outputFieldName":"Average Expense"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1040,256],"id":"b66ec37d-e8be-4294-96ff-fa30d3d40875","name":"Aggregate1"},{"parameters":{"operation":"sendDocument","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id }}","binaryData":true,"additionalFields":{"caption":"Here is Average Spend Amount-Comparison By Month Report.","fileName":"Average Spend Amount-Comparison By Month Report.png"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1440,256],"id":"a809ad76-bb5e-41f2-ac45-a784908cc87e","name":"Send a document1","webhookId":"5398425d-0b83-4b89-ada3-f78dc5a9d92e","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}}],"connections":{"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]},"Date & Time":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"AI Agent":{"main":[[{"node":"Manual Reply","type":"main","index":0}]]},"Telegram Trigger":{"main":[[{"node":"is file there","type":"main","index":0}]]},"is file there":{"main":[[{"node":"Analyze document","type":"main","index":0}],[{"node":"Text Classifier1","type":"main","index":0}]]},"Insert New Expense":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Text Classifier","type":"ai_languageModel","index":0}]]},"Analyze document":{"main":[[{"node":"Text Classifier","type":"main","index":0}]]},"Text Classifier":{"main":[[{"node":"OCR Agent data filler","type":"main","index":0}],[{"node":"False Image","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"OCR Agent data filler","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory1":{"ai_memory":[[{"node":"OCR Agent data filler","type":"ai_memory","index":0}]]},"Date & Time1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"Insert New Expense1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"OCR Agent data filler":{"main":[[{"node":"Ocr Reply","type":"main","index":0}]]},"Ocr Reply":{"main":[[],[{"node":"False Image1","type":"main","index":0}]]},"Text Classifier1":{"main":[[{"node":"Query Design for Comparison By Month Report","type":"main","index":0},{"node":"Query Design for Comparison By Month Report1","type":"main","index":0}],[{"node":"AI Agent","type":"main","index":0}]]},"Groq Chat Model1":{"ai_languageModel":[[{"node":"Text Classifier1","type":"ai_languageModel","index":0}]]},"Query Design for Comparison By Month Report":{"main":[[{"node":"Data Fetching for Comparison By Month Report","type":"main","index":0}]]},"Data Fetching for Comparison By Month Report":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"QuickChart","type":"main","index":0}]]},"QuickChart":{"main":[[{"node":"Send a document","type":"main","index":0}]]},"Query Design for Comparison By Month Report1":{"main":[[{"node":"Data Fetching for Comparison By Month Report1","type":"main","index":0}]]},"Data Fetching for Comparison By Month Report1":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"QuickChart1":{"main":[[{"node":"Send a document1","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"QuickChart1","type":"main","index":0}]]},"Send a document":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"faa3c473-89ad-4410-b7ab-33edc3676d8a","triggerCount":1,"shared":[{"createdAt":"2025-09-30T11:53:45.638Z","updatedAt":"2025-09-30T11:53:45.638Z","role":"workflow:owner","workflowId":"t8lo2pvBVcmlEUhC","projectId":"jYp8xiWttkK2cWvC"}],"tags":[]}