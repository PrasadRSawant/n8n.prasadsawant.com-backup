{"createdAt":"2025-09-26T06:43:30.716Z","updatedAt":"2025-09-30T12:00:52.000Z","id":"GSrNDYr79P5WKTX1","name":"Arthika: Expense Assistant","active":false,"isArchived":false,"nodes":[{"parameters":{"promptType":"define","text":"={{ $('Telegram Trigger').item.json.message.text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[704,272],"id":"ac4b20e6-9ef0-4c24-939b-927acb9be745","name":"AI Agent"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[560,496],"id":"e3b0a419-c6dd-4dae-b0e0-0f0b8640243c","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[704,496],"id":"b5fa4b95-ac28-4054-b7fc-2cf48e96779b","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[1920,-576],"id":"ae930a85-28be-457d-9965-5e180a4b19a4","name":"When clicking ‘Execute workflow’"},{"parameters":{"operation":"executeQuery","query":"CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";  -- required for gen_random_uuid()\n\nCREATE TABLE personal_expenses (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),  -- Unique identifier (UUID v4)\n    transaction_date TIMESTAMP NOT NULL,            -- When the transaction happened\n    amount NUMERIC(12, 2) NOT NULL,                 -- Amount spent\n    payment_method VARCHAR(50) NOT NULL,            -- e.g. GPay, PhonePe, Cash, Card, UPI\n    category VARCHAR(100),                          -- e.g. Food, Travel, Shopping\n    merchant VARCHAR(150),                          -- Store/vendor name\n    notes TEXT,                                     -- Any extra details\n    source VARCHAR(50) DEFAULT 'manual',            -- 'image_ocr' or 'manual'\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- When the record was inserted\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2128,-576],"id":"4b3dca8a-e042-42b0-b948-0dd7ae8e366c","name":"Execute a SQL query","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[1008,496],"id":"b8d46b6a-dc92-4fff-b9a1-7eeb92ccd7f6","name":"Date & Time"},{"parameters":{"updates":["message"],"additionalFields":{"download":true,"imageSize":"large"}},"type":"n8n-nodes-base.telegramTrigger","typeVersion":1.2,"position":[-160,144],"id":"b87dbb35-8cc3-405a-87c0-66c412637ece","name":"Telegram Trigger","webhookId":"18a1710c-550a-4411-89e3-fcf4744d1ac5","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}},"disabled":true},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1056,272],"id":"538da19b-1516-4d4e-81de-486be1c90476","name":"Manual Reply","webhookId":"e9770c55-c1e0-4563-81c3-8c332ec4ab7d","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2dd6d285-58b0-4a94-ad68-a1241b76d6bf","leftValue":"={{ $json.message.photo }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[48,144],"id":"d8d935e6-2fc8-4670-b91e-46073f6befe0","name":"is file there"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=Manual","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[864,496],"id":"878b1ebe-ef3d-4368-90c6-24538386dcaa","name":"Insert New Expense","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"inputText":"={{ $json.content.parts[0].text }}","categories":{"categories":[{"category":"is expense or transaction","description":"is given image is expense or transaction"},{"category":"is not  expense or not transaction","description":"is given image is not  expense or not transaction"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.textClassifier","typeVersion":1.1,"position":[496,-16],"id":"b78330c3-a46c-43b2-bf05-7d796500c681","name":"Text Classifier"},{"parameters":{"model":"llama-3.1-8b-instant","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[496,160],"id":"4a3c86ef-7aed-4304-9f5b-1e175e395e44","name":"Groq Chat Model","credentials":{"groqApi":{"id":"qfg4IRTFYATnvhGV","name":"Groq account"}}},{"parameters":{"resource":"document","modelId":{"__rl":true,"value":"models/gemini-2.5-flash","mode":"list","cachedResultName":"models/gemini-2.5-flash"},"text":"is document related to any transaction or expense?(if Yes return \"yes its expense\"/No return \"No, Given image is not any expense or transaction\")\n\nif its yes then extract below details:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  ","inputType":"binary","options":{}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[304,-16],"id":"e1a0f256-910b-4125-8b3e-be95c813c163","name":"Analyze document","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Please provide valid expense or transaction related document.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[880,96],"id":"80d1accf-08ff-4046-a6dd-de7df1bb3a37","name":"False Image","webhookId":"e9770c55-c1e0-4563-81c3-8c332ec4ab7d","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[944,-80],"id":"fb08416d-d458-42d8-a16a-594a7947b0df","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"ZKmR3WzEybcGTCae","name":"Tensora"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}","tableName":"n8n_expense_tracker"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[1088,-80],"id":"ba0194e9-3033-4b00-88f6-c827af9200b3","name":"Postgres Chat Memory1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTimeTool","typeVersion":2,"position":[1392,-80],"id":"a78110a2-3c9d-47ee-87a2-722edf77c8ec","name":"Date & Time1"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"personal_expenses","mode":"list","cachedResultName":"personal_expenses"},"columns":{"mappingMode":"defineBelow","value":{"amount":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', `The numeric value of the expense with two decimal places.  e.g. 250.00`, 'number') }}","transaction_date":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('transaction_date', `The date and time when the transaction happened. e.g 2025-09-30T10:15:00`, 'string') }}","payment_method":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('payment_method', `The payment mode used (e.g., GPay, UPI, Cash, Card, PhonePe).\ne.g. \"GPay\"`, 'string') }}","category":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('category', `The type of expense (e.g., Food, Rent, Travel, Shopping, Groceries, Bills).\ne.g. \"Food\"`, 'string') }}","merchant":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('merchant', `The name of the vendor, shop, or recipient of the transaction.\ne.g \"Dominos Pizza\"`, 'string') }}","notes":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notes', ` Any additional information, including the raw OCR text if extracted from an image.\ne.g \"Paid via UPI - GPay screenshot text: 'Rs 250 debited to Dominos'\"`, 'string') }}","source":"=OCR","created_at":"={{ new Date().toISOString().slice(0,19) }}","expense_user":"={{ $('Telegram Trigger').item.json.message.chat.first_name }} {{ $('Telegram Trigger').item.json.message.chat.last_name }}","chat_id":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"transaction_date","displayName":"transaction_date","required":true,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"amount","displayName":"amount","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"payment_method","displayName":"payment_method","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"category","displayName":"category","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"merchant","displayName":"merchant","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"notes","displayName":"notes","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"source","displayName":"source","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false},{"id":"expense_user","displayName":"expense_user","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"chat_id","displayName":"chat_id","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[1248,-80],"id":"5ce14977-a7a3-4dde-9299-39ca43673f5d","name":"Insert New Expense1","credentials":{"postgres":{"id":"P8ta1vGMGbrIOFm2","name":"Postgres:N8NDataExtractionDB"}}},{"parameters":{"promptType":"define","text":"={{ $json.content.parts[0].text }}","options":{"systemMessage":"=You are a helpful Expense Management Assistant.  \nYour name is \"Arthika\".  \nYour role is to process user-provided expense details and store them into the database using the \"Insert New Expense\" tool.  \n\nInstructions:  \n- Always extract and structure the expense details into the following fields:\n  1. transaction_date (Required) → The date and time when the transaction happened.  \n  2. amount (Required) → Numeric value with two decimal places.  \n  3. payment_method (Required) → The mode of payment (e.g., GPay, UPI, Cash, Card).  \n  4. category (Required) → The type of expense (e.g., Food, Rent, Travel, Shopping).  \n  5. merchant → Include if provided. If not provided, ask the user unless they explicitly say to keep it null.  \n  6. notes → Any additional details or raw OCR text.  \n  7. created_at (Required) → The current timestamp, always obtained from the \"Date and Time\" tool.  \n\n- Use the \"Insert New Expense\" tool to save the structured data into the database.  \n- If some information is missing, still include the key with a null value.  \n- Never invent amounts or merchants unless explicitly present in the input.  \n- Make sure you are not recording same expense again and again\n- Provide detail about the recorded data as preview to user\nAfter confirmation create the record into the database table\n\nImporttant: Reply in Markdown(Legacy) format"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[1088,-304],"id":"a0daa38c-9c21-4f29-a305-e85964099adb","name":"OCR Agent data filler"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"={{ $json.output }}","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1440,-304],"id":"bd58c7e2-73de-4517-8976-12dff6e74fce","name":"Ocr Reply","webhookId":"e9770c55-c1e0-4563-81c3-8c332ec4ab7d","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}},"onError":"continueErrorOutput"},{"parameters":{"chatId":"={{ $('Telegram Trigger').item.json.message.chat.id}}","text":"=Something Went wrong. Expense is created. Failed to Respond.","additionalFields":{"appendAttribution":false,"parse_mode":"Markdown"}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1648,-224],"id":"3c0aba74-6b6b-40e1-8863-fb57b1455e3a","name":"False Image1","webhookId":"e9770c55-c1e0-4563-81c3-8c332ec4ab7d","credentials":{"telegramApi":{"id":"pWGBBBph0duhZ2AR","name":"Arthika"}}}],"connections":{"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]},"Date & Time":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"AI Agent":{"main":[[{"node":"Manual Reply","type":"main","index":0}]]},"Telegram Trigger":{"main":[[{"node":"is file there","type":"main","index":0}]]},"is file there":{"main":[[{"node":"Analyze document","type":"main","index":0}],[{"node":"AI Agent","type":"main","index":0}]]},"Insert New Expense":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[{"node":"Text Classifier","type":"ai_languageModel","index":0}]]},"Analyze document":{"main":[[{"node":"Text Classifier","type":"main","index":0}]]},"Text Classifier":{"main":[[{"node":"OCR Agent data filler","type":"main","index":0}],[{"node":"False Image","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"OCR Agent data filler","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory1":{"ai_memory":[[{"node":"OCR Agent data filler","type":"ai_memory","index":0}]]},"Date & Time1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"Insert New Expense1":{"ai_tool":[[{"node":"OCR Agent data filler","type":"ai_tool","index":0}]]},"OCR Agent data filler":{"main":[[{"node":"Ocr Reply","type":"main","index":0}]]},"Ocr Reply":{"main":[[],[{"node":"False Image1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Telegram Trigger":[{"json":{"update_id":983040127,"message":{"message_id":113,"from":{"id":1298139752,"is_bot":false,"first_name":"Divya Wairkar","language_code":"en"},"chat":{"id":1298139752,"first_name":"Divya Wairkar","type":"private"},"date":1759232333,"photo":[{"file_id":"AgACAgUAAxkBAANxaNvBTT2gzhsnUFKpG6FfJDtPMD4AAhvLMRuQSNhWV_HrMO1dD_8BAAMCAANzAAM2BA","file_unique_id":"AQADG8sxG5BI2FZ4","file_size":1107,"width":63,"height":90},{"file_id":"AgACAgUAAxkBAANxaNvBTT2gzhsnUFKpG6FfJDtPMD4AAhvLMRuQSNhWV_HrMO1dD_8BAAMCAANtAAM2BA","file_unique_id":"AQADG8sxG5BI2FZy","file_size":10690,"width":225,"height":320},{"file_id":"AgACAgUAAxkBAANxaNvBTT2gzhsnUFKpG6FfJDtPMD4AAhvLMRuQSNhWV_HrMO1dD_8BAAMCAAN5AAM2BA","file_unique_id":"AQADG8sxG5BI2FZ-","file_size":30909,"width":594,"height":846},{"file_id":"AgACAgUAAxkBAANxaNvBTT2gzhsnUFKpG6FfJDtPMD4AAhvLMRuQSNhWV_HrMO1dD_8BAAMCAAN4AAM2BA","file_unique_id":"AQADG8sxG5BI2FZ9","file_size":36016,"width":562,"height":800}]}}}]},"versionId":"96087e0b-dce6-48d8-9608-72edeb059c1f","triggerCount":1,"shared":[{"createdAt":"2025-09-26T06:43:30.720Z","updatedAt":"2025-09-26T06:43:30.720Z","role":"workflow:owner","workflowId":"GSrNDYr79P5WKTX1","projectId":"jYp8xiWttkK2cWvC"}],"tags":[]}